<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Think on Puzzle Hunt with Racer</title><link>https://zangruizhe.github.io/categories/think/</link><description>Recent content in Think on Puzzle Hunt with Racer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 20 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://zangruizhe.github.io/categories/think/index.xml" rel="self" type="application/rss+xml"/><item><title>Reading list - 2025</title><link>https://zangruizhe.github.io/post/read_book_2025/</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/read_book_2025/</guid><description>&lt;p>在这里记录一下2025年看过的值得推荐的书, 打分(5分为最高分)和评价, 我看过觉得不好的书, 就不记录了, 不值得为不好的东西浪费时间.&lt;/p>
&lt;p>&lt;img src="https://zangruizhe.github.io/images/book_2025/1.png" alt="book1">&lt;/p>
&lt;h3 id="1-理性生活指南-进度60-评分5分">1. 理性生活指南 (进度:60%) (评分:5分)&lt;/h3>
&lt;p>今年看过的最重要的一本书, 作者是美国心理学家阿尔伯特·艾利斯(Albert Ellis), 详细介绍了理性情绪行为疗法REBT的实践方法.&lt;/p>
&lt;p>通过理性的分析识别出我们意识中非理性的信念, 而这些非理性的信念往往带来很多糟糕的负面情绪, 通过对这些非理性信念的批判, 替换成理性的信念, 来让我们获得健康的情绪.&lt;/p>
&lt;p>我现在经常使用这个方法来帮助自己从负面情绪中走出来, 非常适合喜欢理性思辨又想有一个健康稳定情绪的人阅读.&lt;/p>
&lt;p>&lt;img src="https://zangruizhe.github.io/images/book_2025/2.png" alt="book2">&lt;/p>
&lt;h3 id="2-mathematics-of-machine-learning-master-linear-algebra-calculus-and-probability-for-machine-learning-进度100-评分4分">2. Mathematics of Machine Learning: Master linear algebra, calculus, and probability for machine learning (进度:100%) (评分:4分)&lt;/h3>
&lt;p>这本书的内容和结构非常有意思, 从一个数学家的角度写出来的书&lt;/p>
&lt;p>从具体的例子出发, 形成定理, 然后基于基本定理再给出引理, 并且给出详细的证明过程, 不仅讲了数学知识, 更是巩固了一下使用数学符号进行证明的技巧.&lt;/p>
&lt;p>看完这本书算是复习了部分高等数学知识.&lt;/p>
&lt;p>&lt;img src="https://zangruizhe.github.io/images/book_2025/3.png" alt="book3">&lt;/p>
&lt;h3 id="3-the-next-conversation-argue-less-talk-more-进度30-评分4分">3. The Next Conversation: Argue Less, Talk More (进度:30%) (评分:4分)&lt;/h3>
&lt;p>作者Jefferson Fisher是一个律师, 开了自己的播客讲如何和人进行困难的谈话.&lt;/p>
&lt;p>他在书里说: 每个人都是一条河流, 我们看到到的他们只是水面的部分, 但是和我们对话的却是河底, 所以不要通过表面现象来判断对方, 而是想办法看到河底的状况.&lt;/p>
&lt;p>他还举了一个例子:&lt;/p>
&lt;p>如果别人邀请你参加个活动, 你不想去, 不要先表示感谢, 再说but, 去拒绝别人. 而是先直接拒绝, 说我不能去, 然后解释原因, 并表示感谢.&lt;/p></description></item><item><title>All In</title><link>https://zangruizhe.github.io/post/all_in/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/all_in/</guid><description>&lt;p>最近在不同的地方看到了同一个类似的观点: &lt;code>生活是一场all in的游戏&lt;/code>.&lt;/p>
&lt;h2 id="为什么要all-in">为什么要all in&lt;/h2>
&lt;p>因为有些游戏, 只有all in才有参与的资格. 生命本身就是一个例子.&lt;/p>
&lt;p>Jordan Peterson在一节课上说:&lt;/p>
&lt;blockquote>
&lt;p>生命就是这样一场&lt;code>游戏&lt;/code>, 从一开始你就all in了, 无论你选择或者不选择, 你都做出了选择, 无论你做什么, 都是在全力以赴, &lt;code>这场游戏最终会夺走你的生命&lt;/code>.&lt;/p>&lt;/blockquote>
&lt;p>所以既然无论怎样选择, 都是在all in, 那么在结局到来之前, 不如尽情玩儿一场最辉煌的游戏. 再也没有比这更好的选择了.&lt;/p>
&lt;p>其实很多事情在开始的时候, &lt;code>都是在一片漆黑的隧道里, 前方只是有模模糊糊的亮光, 看不清脚下的路&lt;/code>, 在躬身入局之前, 是想不明白的. 只有开始干了, 向着亮光摸索着前进, 边走边解决各种问题, 前方的路才会越来越清楚. 一想都是问题, 只有去做才能找到办法.&lt;/p>
&lt;h2 id="如何all-in">如何all in&lt;/h2>
&lt;p>有些人想不明白做哪个选择, 所以迟迟不选择, 总是想要想清楚每个选择的结果才行动.&lt;/p>
&lt;p>可是&lt;code>很多事情只有做了才知道结果&lt;/code>, &lt;code>存在主义的真谛就在于此&lt;/code>, 没有水晶球, 没有人能替我们预言结局, 这就是生命游戏的奥秘所在, &lt;code>只有行动才能带来改变, 也只有去做了, 才能领悟生活是什么.&lt;/code>&lt;/p>
&lt;p>正如上边所说, 无论做什么, 甚至什么也不做, 躺平, 也是在all in, 而我们走的任何一条游戏路径, 最终都会夺走我们的生命.&lt;/p>
&lt;p>但是怎么选择是有些智慧在里边的, 这里有一些观点可以参考:&lt;/p>
&lt;p>Jordan Peterson 说:&lt;/p>
&lt;ol>
&lt;li>选择你能力范围内最卓越的事情去完成&lt;/li>
&lt;li>去承担责任, 人们总能在自己承担的责任中找到意义&lt;/li>
&lt;/ol>
&lt;p>Naval Ravikant 的观点:&lt;/p></description></item><item><title>Pirate's kiss (1) - probability</title><link>https://zangruizhe.github.io/post/pirate_kiss_1/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/pirate_kiss_1/</guid><description>&lt;p>&lt;img src="https://zangruizhe.github.io/images/pirate.jpg" alt="1">&lt;/p>
&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;p>我打算写一系列的文章来记录我是如何在生活中应用 &lt;code>Pirate's kiss&lt;/code> 这个理论的. 内容会涉及概率论, Gambling, 扑克, 交易, 投资等等.&lt;/p>
&lt;h3 id="什么是-pirates-kiss">什么是 Pirate&amp;rsquo;s kiss?&lt;/h3>
&lt;p>这个词要分开理解.&lt;/p>
&lt;p>首先我们先理解&lt;code>kiss&lt;/code>, 这里指&lt;code>KISS原则&lt;/code>, 在英语里是Keep It Simple, Stupid, 当然我倾向于&lt;code>KISS = Keep It Stupid Simple&lt;/code>.&lt;/p>
&lt;p>KISS原则类似于奥卡姆剃刀, 就是&lt;code>尽量用简单的方式解决问题, 不仅仅是不要over kill, 而是要尽量的简单, Stupid Simple的那种简单&lt;/code>.&lt;/p>
&lt;p>然后是&lt;code>Pirate&lt;/code>, 在这里指&lt;code>海盗精神&lt;/code>, 就是不随大流, 不墨守成规, 有自己的思想, 知行合一, &lt;code>在一些关键问题上, 不会轻易接受主流认知, 总是先质疑, 然后验证, 最后才是决定是否接受&lt;/code>.&lt;/p>
&lt;p>比如:&lt;/p>
&lt;ol>
&lt;li>金融市场是有效的, 价格是当前所有信息综合起来的表现, 不存在套利机会&lt;/li>
&lt;li>在二级市场里个人是无法战胜机构, 基金经理无法战胜指数&lt;/li>
&lt;li>只要在X时候买入A股票长期看来能盈利&lt;/li>
&lt;li>只要找到X指标, 交易就能盈利&lt;/li>
&lt;li>有钱人都坏, 我变坏了也能赚到钱&lt;/li>
&lt;/ol>
&lt;p>所以&lt;code>Pirate's kiss&lt;/code>原则就是, 当看到上述这些论点时:&lt;/p></description></item><item><title>Think Programming(2) - OO VS FP</title><link>https://zangruizhe.github.io/post/think_programming_2/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/think_programming_2/</guid><description>&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;h3 id="oo-vs-fp">OO VS FP&lt;/h3>
&lt;p>接下来我想讨论一下 OO 和 FP. 先说结论:&lt;/p>
&lt;blockquote>
&lt;p>只使用任何一个都不能写出能快速交付, 同时又容易维护的代码工程.&lt;/p>
&lt;p>我们需要结合这两种编程模式的优点, 谨慎使用这些思想工具, 尤其是OO, 如果过度使用OO的一些编程思想, 例如: 继承, 代码会很快变得难以理解和维护.&lt;/p>&lt;/blockquote>
&lt;p>未完待续&amp;hellip;&lt;/p>
&lt;h2 id="english-version">English version&lt;/h2>
&lt;h3 id="oo-vs-fp-1">OO VS FP&lt;/h3>
&lt;p>Now I want to talk briefly about Object-Oriented (OO) and Functional Programming (FP). My conclusion is:&lt;/p>
&lt;blockquote>
&lt;p>using either approach alone won&amp;rsquo;t help you write code that&amp;rsquo;s both quick to deliver and easy to maintain.&lt;/p></description></item><item><title>Think Programming(1) - Insights from My Coding Journey</title><link>https://zangruizhe.github.io/post/think_programming_1/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/think_programming_1/</guid><description>&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;p>我编写商业软件到现在有10年的时间.&lt;/p>
&lt;p>使用过的编程语言(按掌握程度排序): C/C++, Python, Python(machine learn), F#, Golang, Scala, Clojure, JavaScript&lt;/p>
&lt;p>使用过的编程范式: Object-Oriented (OO), Functional Programming (FP)&lt;/p>
&lt;p>实现过的软件项目: 低延迟TCP/UDP Server side Framework, 高并发订单系统, 利用machine learning实现的高性能预测系统等等&lt;/p>
&lt;p>我计划在这篇文章里记录一下我对编程的一些思考, 而且这些想法随着我解决更复杂问题, 积累更多的经验后也会有些变化, 因此我会不断更新这篇文章.&lt;/p>
&lt;h3 id="自顶向下编程">自顶向下编程&lt;/h3>
&lt;p>有两种编程理念, 一种是自底向上, 一种是自顶向下.&lt;/p>
&lt;p>&lt;code>自低向上&lt;/code>: 先实现很多小的函数, 然后使用这些小函数组成很复杂的功能. 在很多讲lisp的书里, 经常会讲如何实践自底向上的编程思想.&lt;/p>
&lt;p>&lt;code>自顶向下&lt;/code>: 从使用者的角度, 先写完框架/函数API, 最后才是具体代码实现.&lt;/p>
&lt;p>我赞同&lt;code>使用很多小的函数组成很复杂的功能&lt;/code>这个编程思路, 但是在我的编程实践里, 我认为自顶向下才更容易写出高质量的代码.&lt;/p>
&lt;p>举个例子:
假如我们要写一个网站,用来展示在不同的网站上,同一款汽车的最新销售信息, 方便用户选择最优的网站去购买汽车&lt;/p>
&lt;p>如果使用&lt;code>自底向上&lt;/code>的思路, 我们会依次实现这些代码&lt;/p>
&lt;ol>
&lt;li>设计数据结构&lt;/li>
&lt;li>去不同网站拉取数据的的代码&lt;/li>
&lt;li>实现数据CRUD的代码&lt;/li>
&lt;li>实现前端与后端数据交互的api&lt;/li>
&lt;li>前端代码&lt;/li>
&lt;/ol>
&lt;p>但是如果使用&lt;code>自顶向下&lt;/code>的思路, 我们会先写/画出框架, 然后依据框架给出API, 并不需要立刻实现具体代码逻辑.&lt;/p></description></item></channel></rss>