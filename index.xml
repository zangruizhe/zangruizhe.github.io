<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Puzzle Hunt with Racer</title><link>https://zangruizhe.github.io/</link><description>Recent content on Puzzle Hunt with Racer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 02 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://zangruizhe.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>An odyssey to real world 现实世界的奥德赛</title><link>https://zangruizhe.github.io/post/an_odyssey_2_real_world/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/an_odyssey_2_real_world/</guid><description>&lt;p>一个月前, 我决定远离互联网上那些&lt;code>精心准备&lt;/code>的内容, 让每日听到的和看到的东西都尽量贴近现实, 进行一次&lt;code>回归现实的奥德赛&lt;/code>.&lt;/p>
&lt;h2 id="为什么要清理信息来源">为什么要清理信息来源&lt;/h2>
&lt;p>在这个&lt;code>影像+移动互联网&lt;/code>时代, 尽管在我刻意控制的情况下, 我每天用在手机上的时间也在3-4个小时, 看的大多数是youtube, 推特等APP里&lt;code>精心准备&lt;/code>的各种内容, 例如影视拉片, 经济分析, 体育集锦, 自媒体等等.&lt;/p>
&lt;p>这些APP推送和组织信息目的就是一个: &lt;code>想办法吸引我们的注意力, 让我们留在APP里, 留的时间越长越好&lt;/code>.&lt;/p>
&lt;p>这些APP主要通过两种方式在我们大脑中形成&lt;code>成瘾神经回路&lt;/code>, 让我们停不下来, 像个&lt;code>赌鬼&lt;/code>或者&lt;code>瘾君子&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>下拉刷新的更新方式&lt;/code>, 类似于赌场老虎机, 以一定概率刷出你喜欢的内容, 但并不100%推送你喜欢的内容, 同时根据你的点击或者划过的动作, 快速适应你的新喜好.&lt;/p>
&lt;p>这样你就会像赌博一样, 不停地下拉刷新, 不停地抽奖, 成瘾效果非常好.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>APP里的内容, 以秒为单位, 不停地在挑起我们的情绪, 刺激我们的大脑, 让大脑持续处于&lt;code>多巴胺爆棚&lt;/code>状态.&lt;/p>
&lt;p>Stanford 的神经科学家 Andrew Huberman, 在一次采访里说过:&lt;/p>
&lt;blockquote>
&lt;p>任何导致多巴胺快速重复波动的行为或者物质都会在神经系统中形成一种模式, 你会渴望那种东西, 而且随着时间的推移, 它会给你越来越低的满足感.&lt;/p>&lt;/blockquote>
&lt;p>所以我们会越刷越觉得不过瘾&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>与此同时, 我接收的这些信息给我营造了一个完美世界的幻觉, 看多了这种与现实世界不匹配的内容, 会提高我对现实的期待, 扭曲了我对现实世界的认识.&lt;/p>
&lt;p>Andrew 也给出了解决方案: &lt;code>重置成瘾脑回路的唯一方法就是停止, 然后在它的位置上做其他的事情, 理想情况下, 做大脑适应性的事情.&lt;/code>&lt;/p>
&lt;p>所以远离虚假信息的办法就是:&lt;code>停止, 用高质量真实的内容替换它们, 创造更多接触现实世界的机会.&lt;/code>&lt;/p>
&lt;h2 id="清理什么内容">清理什么内容&lt;/h2>
&lt;p>我尝试清理我接收到的&lt;code>任何会导致大脑里的多巴胺快速重复波动&lt;/code>的内容.&lt;/p>
&lt;p>我现在仍然会看视频节目或者听podcast, 但是我目前仅仅局限于看以下的内容:&lt;/p>
&lt;ol>
&lt;li>Jordan Peterson 的采访和讲课视频 (心理学教授, 出过两本书《12 Rules for Life》, 《Beyond Order: 12 More Rules For Life》)&lt;/li>
&lt;li>Andrew Huberman 的采访和podcast (Stanford 神经科学家)&lt;/li>
&lt;li>Naval Ravikant 的采访(硅谷投资人), 特别推荐Chris Williamson采访他的这一期 &lt;a href="https://www.youtube.com/watch?v=KyfUysrNaco">44 Harsh Truths About Human Nature&lt;/a>,《纳瓦尔宝典》这本书也不错&lt;/li>
&lt;/ol>
&lt;p>这些内容我认为足够真实, 是来自现实世界的信息, 增强了我对现实世界的认识, 而且每集都在1小时以上, 量大管饱, 足够看半年以上了.&lt;/p></description></item><item><title>Shangri-La of CPP - Template Metaprogramming(TMP)</title><link>https://zangruizhe.github.io/post/shangri-la_of_cpp/</link><pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/shangri-la_of_cpp/</guid><description>&lt;p>C++程序员生活在两个世界里, 区别在于是否使用&lt;code>template metaprogramming&lt;/code>(TMP).&lt;/p>
&lt;p>C++ programmers live in two worlds, which are different depending on whether they use &lt;code>template metaprogramming&lt;/code>(TMP) or not.&lt;/p>
&lt;p>一个世界是几乎不使用TMP, 另一个世界几乎用TMP完成95%的代码.&lt;/p>
&lt;p>In one world, programmers almost never use TMP. In the other world, programmers use TMP for about 95% of their code.&lt;/p>
&lt;p>这篇文章是写给第一个世界C++程序员的TMP使用技术简介.&lt;/p>
&lt;p>This article is a short introduction to TMP for C++ programmers in the first world (who do not use TMP often).&lt;/p>
&lt;p>我们先使用TMP实现一个简单的程序, 你可以思考下如果不使用TMP应该如何实现.&lt;/p>
&lt;p>Let&amp;rsquo;s start with a simple example using TMP. You can think about how you would write it without TMP.&lt;/p></description></item><item><title>The Illusion of a Perfect World 完美世界的幻觉(3) - 祛魅 Demystify</title><link>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world_3/</link><pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world_3/</guid><description>&lt;p>这是完美世界的幻觉第三篇, 这篇文章我想讨论的是&lt;code>祛魅(Demystify)&lt;/code>.&lt;/p>
&lt;p>未完待续&amp;hellip;&lt;/p></description></item><item><title>The Illusion of a Perfect World 完美世界的幻觉(2) - 学游泳，你学会才下水？</title><link>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world_2/</link><pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world_2/</guid><description>&lt;p>上一篇&lt;code>完美世界的幻觉&lt;/code>, 有几个点我打算单独拿出来聊一聊.&lt;/p>
&lt;p>这篇文章我想讨论的是&lt;code>完美主义(Perfectionism)&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>在合适的事情上, 适度的完美主义, 有助于我们追求卓越, 是好的.&lt;/p>&lt;/blockquote>
&lt;p>但是, 过度的完美主义是有害的, 而且完美主义越严重, 影响越大, 下边是我总结的&lt;code>从轻到重&lt;/code>的影响&lt;/p>
&lt;h3 id="1-过度精益求精-浪费了时间">1. 过度精益求精, 浪费了时间&lt;/h3>
&lt;p>大多数事情做到80%的水平, 只需要20%的时间, 越追求更高的水平, 所需的时间是&lt;code>指数级别&lt;/code>增长的.&lt;/p>
&lt;p>而且80%的事情做到80%的水平往往是足够的, 必须有智慧去选择那10-20%的事情去追求更高的水平. 不然就会在无意义的事情上浪费大量的时间和精力.&lt;/p>
&lt;p>比如&lt;code>孔乙己追求掌握回字的四种写法&lt;/code>, 不同的人可能会在不同的事情上去研究&lt;code>回字的四种写法&lt;/code>, 成为另一个&lt;code>孔乙己&lt;/code>.&lt;/p>
&lt;h3 id="2-阻碍我们行动">2. 阻碍我们行动&lt;/h3>
&lt;p>过度的完美主义会导致我们想要制定&lt;code>一个完美的计划&lt;/code>, &lt;code>等待一个完美的时间&lt;/code>, &lt;code>做好充足的准备&lt;/code>,&lt;/p>
&lt;p>总是觉得还差点什么, 总觉得还有些原理还没搞明白, 门道还没看清楚, 总想要再等等.&lt;/p>
&lt;h3 id="3-想像和现实脱节-导致自我贬低">3. 想像和现实脱节, 导致自我贬低&lt;/h3>
&lt;p>过度完美主义, 会在脑子里预想整个事情发展的完美过程, 但是当落地到现实中就会被现实教育:&lt;/p>
&lt;blockquote>
&lt;p>本来以为重要的地方并不重要, 本来以为做好了planB, 发现planB并没有用, 等等.&lt;/p>&lt;/blockquote>
&lt;p>当想像和现实冲突严重的时候, 过度的完美主义容易走向两个方向:&lt;/p>
&lt;ol>
&lt;li>要求现实符合想象&lt;/li>
&lt;li>自我惩罚觉得计划的不够好, 进一步进入自我贬低.&lt;/li>
&lt;/ol>
&lt;p>而这两个方向都不能带领我们前进, 对于事情的推进没有任何帮助.&lt;/p>
&lt;h3 id="该如何防止过度完美主义">该如何防止过度完美主义&lt;/h3>
&lt;blockquote>
&lt;p>脑子里的想法是无法改变现实世界的, &lt;code>只有行动才能带来改变&lt;/code>.&lt;/p>&lt;/blockquote>
&lt;p>解决之道都很简单, 但只有不断地实践才能真正的改变我们的生活.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对于容易过度优化的人来说, 可以大概给自己做的事提前定个&lt;code>质量标准&lt;/code>和&lt;code>时间标准&lt;/code>, 在规定的时间内, 按质量完成, 时间到没完成, 要么降低质量标准,要么延长时间.&lt;/p>
&lt;p>比如: A任务要达到70%的质量, 在3小时内完成, B任务要达到90%的质量, 5天内完成.&lt;/p></description></item><item><title>The Illusion of a Perfect World 完美世界的幻觉</title><link>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/the_illusion_of_a_perfect_world/</guid><description>&lt;p>今天和我的心理咨询师聊到了一个现象, 我觉得很有启发:&lt;/p>
&lt;blockquote>
&lt;p>我们的意识被悄悄植入了一个存在完美世界, 完美超人的幻觉. 而这个观念在我们的思想里塑造了一个完美全能的形象, 可以游刃有余的解决掉任何棘手的问题.&lt;/p>&lt;/blockquote>
&lt;p>有的信息是在塑造一些&lt;code>超人形象&lt;/code>, 这些形象总是能够力挽狂澜, 再困难的问题到了他们这里, 他们都会在谈笑间轻轻松松化解了, 比如:&lt;/p>
&lt;ol>
&lt;li>黄飞鸿总是能轻轻松松战胜对手&lt;/li>
&lt;li>诸葛亮总是摇摇扇子就把敌人打败了&lt;/li>
&lt;li>张飞更是隔岸喊一嗓子就把敌人吓退了&lt;/li>
&lt;li>自由搏击KO集锦, 都是一名选手轻松一脚KO, 对方就像落叶一样倒下了&lt;/li>
&lt;li>10大经典进球, 都是前锋轻轻松松各种花式过人, 最后轻松破门, 留下门将一脸茫然&lt;/li>
&lt;li>还有更多漫威里的形象更是如此&lt;/li>
&lt;/ol>
&lt;p>有的信息是在塑造一些&lt;code>完美世界&lt;/code>, 仿佛这个世界上就是有人的生活就是各种顺利, 各种胜利, 各种拿到最后想要的结果, 一直都在巅峰体验, 比如:&lt;/p>
&lt;ol>
&lt;li>小红书, 抖音里各种&amp;quot;精致&amp;quot;生活, 那些博主好像要不就是生活在完美世界, 各种顺利, 要不就是个人能力超强, 不费吹灰之力就把生活里里外外搞得牌亮条顺, 让大家一阵羡慕&lt;/li>
&lt;li>很多影视作品里也是这样, 主角各种计划都不做, 全凭临场反应, 在头脑和体力上各种碾压对手, 打的敌人毫无招架之力, 哪怕在危急时刻, 也不耽误主角装X喝口酒慢悠悠起来继续赢到最后&lt;/li>
&lt;li>甚至连记录片都有二次加工的过程, 刻意突出一些, 刻意隐藏一些.&lt;/li>
&lt;/ol>
&lt;p>然而这些&lt;code>都不是真正的生活&lt;/code>. 他们要么是对生活最精彩的部分的提炼, 要么就是刻意美化, 很多甚至根本就是假的, 是幻想出来的完美世界, 完美人类.&lt;/p>
&lt;blockquote>
&lt;p>我们吃的东西塑造了我们的身体, 我们接收到的信息塑造了我们的思想.&lt;/p>&lt;/blockquote>
&lt;p>所以&lt;code>当我们潜意识接纳了这些虚假的原型, 以这个想象中的完美形象为标杆, 去评价自己当下的生活, 就会觉得挫败和气馁, 甚至会阻碍我们去行动&lt;/code>.&lt;/p>
&lt;p>当我们吃了太多垃圾食品, 搞坏了身体, 我们就会感受到, 修复的方法可以是: &lt;code>吃健康的食物, 合理的作息, 适度的运动&lt;/code>, 经过几个月或者几年时间或许能调整过来.&lt;/p>
&lt;blockquote>
&lt;p>但处理垃圾信息对我们的影响, 却不像拒接垃圾食物那么容易.&lt;/p></description></item><item><title>Pirate's kiss (1) - probability</title><link>https://zangruizhe.github.io/post/pirate_kiss_1/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/pirate_kiss_1/</guid><description>&lt;p>&lt;img src="https://zangruizhe.github.io/images/pirate.jpg" alt="1">&lt;/p>
&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;p>我打算写一系列的文章来记录我是如何在生活中应用 &lt;code>Pirate's kiss&lt;/code> 这个理论的. 内容会涉及概率论, Gambling, 扑克, 交易, 投资等等.&lt;/p>
&lt;h3 id="什么是-pirates-kiss">什么是 Pirate&amp;rsquo;s kiss?&lt;/h3>
&lt;p>这个词要分开理解.&lt;/p>
&lt;p>首先我们先理解&lt;code>kiss&lt;/code>, 这里指&lt;code>KISS原则&lt;/code>, 在英语里是Keep It Simple, Stupid, 当然我倾向于&lt;code>KISS = Keep It Stupid Simple&lt;/code>.&lt;/p>
&lt;p>KISS原则类似于奥卡姆剃刀, 就是&lt;code>尽量用简单的方式解决问题, 不仅仅是不要over kill, 而是要尽量的简单, Stupid Simple的那种简单&lt;/code>.&lt;/p>
&lt;p>然后是&lt;code>Pirate&lt;/code>, 在这里指&lt;code>海盗精神&lt;/code>, 就是不随大流, 不墨守成规, 有自己的思想, 知行合一, &lt;code>在一些关键问题上, 不会轻易接受主流认知, 总是先质疑, 然后验证, 最后才是决定是否接受&lt;/code>.&lt;/p>
&lt;p>比如:&lt;/p>
&lt;ol>
&lt;li>金融市场是有效的, 价格是当前所有信息综合起来的表现, 不存在套利机会&lt;/li>
&lt;li>在二级市场里个人是无法战胜机构, 基金经理无法战胜指数&lt;/li>
&lt;li>只要在X时候买入A股票长期看来能盈利&lt;/li>
&lt;li>只要找到X指标, 交易就能盈利&lt;/li>
&lt;li>有钱人都坏, 我变坏了也能赚到钱&lt;/li>
&lt;/ol>
&lt;p>所以&lt;code>Pirate's kiss&lt;/code>原则就是, 当看到上述这些论点时:&lt;/p></description></item><item><title>Think Programming(2) - OO VS FP</title><link>https://zangruizhe.github.io/post/think_programming_2/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/think_programming_2/</guid><description>&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;h3 id="oo-vs-fp">OO VS FP&lt;/h3>
&lt;p>接下来我想讨论一下 OO 和 FP. 先说结论:&lt;/p>
&lt;blockquote>
&lt;p>只使用任何一个都不能写出能快速交付, 同时又容易维护的代码工程.&lt;/p>
&lt;p>我们需要结合这两种编程模式的优点, 谨慎使用这些思想工具, 尤其是OO, 如果过度使用OO的一些编程思想, 例如: 继承, 代码会很快变得难以理解和维护.&lt;/p>&lt;/blockquote>
&lt;p>未完待续&amp;hellip;&lt;/p>
&lt;h2 id="english-version">English version&lt;/h2>
&lt;h3 id="oo-vs-fp-1">OO VS FP&lt;/h3>
&lt;p>Now I want to talk briefly about Object-Oriented (OO) and Functional Programming (FP). My conclusion is:&lt;/p>
&lt;blockquote>
&lt;p>using either approach alone won&amp;rsquo;t help you write code that&amp;rsquo;s both quick to deliver and easy to maintain.&lt;/p></description></item><item><title>Think Programming(1) - Insights from My Coding Journey</title><link>https://zangruizhe.github.io/post/think_programming_1/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/think_programming_1/</guid><description>&lt;blockquote>
&lt;p>Note: The main content is first written in Chinese, with the English translation following below.&lt;/p>&lt;/blockquote>
&lt;h2 id="chinese-version">Chinese Version&lt;/h2>
&lt;p>我编写商业软件到现在有10年的时间.&lt;/p>
&lt;p>使用过的编程语言(按掌握程度排序): C/C++, Python, Python(machine learn), F#, Golang, Scala, Clojure, JavaScript&lt;/p>
&lt;p>使用过的编程范式: Object-Oriented (OO), Functional Programming (FP)&lt;/p>
&lt;p>实现过的软件项目: 低延迟TCP/UDP Server side Framework, 高并发订单系统, 利用machine learning实现的高性能预测系统等等&lt;/p>
&lt;p>我计划在这篇文章里记录一下我对编程的一些思考, 而且这些想法随着我解决更复杂问题, 积累更多的经验后也会有些变化, 因此我会不断更新这篇文章.&lt;/p>
&lt;h3 id="自顶向下编程">自顶向下编程&lt;/h3>
&lt;p>有两种编程理念, 一种是自底向上, 一种是自顶向下.&lt;/p>
&lt;p>&lt;code>自低向上&lt;/code>: 先实现很多小的函数, 然后使用这些小函数组成很复杂的功能. 在很多讲lisp的书里, 经常会讲如何实践自底向上的编程思想.&lt;/p>
&lt;p>&lt;code>自顶向下&lt;/code>: 从使用者的角度, 先写完框架/函数API, 最后才是具体代码实现.&lt;/p>
&lt;p>我赞同&lt;code>使用很多小的函数组成很复杂的功能&lt;/code>这个编程思路, 但是在我的编程实践里, 我认为自顶向下才更容易写出高质量的代码.&lt;/p>
&lt;p>举个例子:
假如我们要写一个网站,用来展示在不同的网站上,同一款汽车的最新销售信息, 方便用户选择最优的网站去购买汽车&lt;/p>
&lt;p>如果使用&lt;code>自底向上&lt;/code>的思路, 我们会依次实现这些代码&lt;/p>
&lt;ol>
&lt;li>设计数据结构&lt;/li>
&lt;li>去不同网站拉取数据的的代码&lt;/li>
&lt;li>实现数据CRUD的代码&lt;/li>
&lt;li>实现前端与后端数据交互的api&lt;/li>
&lt;li>前端代码&lt;/li>
&lt;/ol>
&lt;p>但是如果使用&lt;code>自顶向下&lt;/code>的思路, 我们会先写/画出框架, 然后依据框架给出API, 并不需要立刻实现具体代码逻辑.&lt;/p></description></item><item><title>Advent of Code 2024 Day13</title><link>https://zangruizhe.github.io/post/aoc2024_day13/</link><pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/aoc2024_day13/</guid><description>&lt;p>For every input, there is only one or zero solution, so that is not a coding question, it checks if you know basic math. :D&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fsharp" data-lang="fsharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Day13&lt;/span>&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> lines &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String.Join&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> lines&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> split2Int64ByReg &lt;span style="color:#e6db74">@&amp;#34;(\d+)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.concat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> nums &lt;span style="color:#f92672">-&amp;gt;&lt;/span> nums &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.splitInto &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">.&lt;/span>Length &lt;span style="color:#f92672">/&lt;/span> 6&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getMinCost &lt;span style="color:#f92672">(&lt;/span>ai&lt;span style="color:#f92672">,&lt;/span> aj&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>bi&lt;span style="color:#f92672">,&lt;/span> bj&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>ti&lt;span style="color:#f92672">,&lt;/span> tj&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// a * ai + b * bi = ti
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a * aj + b * bj = tj
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// solve a, b
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// because for every a, b, t only have one or zero int solution
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> d &lt;span style="color:#f92672">=&lt;/span> ai &lt;span style="color:#f92672">*&lt;/span> bj &lt;span style="color:#f92672">-&lt;/span> aj &lt;span style="color:#f92672">*&lt;/span> bi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>ti &lt;span style="color:#f92672">*&lt;/span> bj &lt;span style="color:#f92672">-&lt;/span> tj &lt;span style="color:#f92672">*&lt;/span> bi&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">/&lt;/span> d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>tj &lt;span style="color:#f92672">*&lt;/span> ai &lt;span style="color:#f92672">-&lt;/span> ti &lt;span style="color:#f92672">*&lt;/span> aj&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">/&lt;/span> d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">*&lt;/span> ai &lt;span style="color:#f92672">+&lt;/span> b &lt;span style="color:#f92672">*&lt;/span> bi &lt;span style="color:#f92672">=&lt;/span> ti &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> a &lt;span style="color:#f92672">*&lt;/span> aj &lt;span style="color:#f92672">+&lt;/span> b &lt;span style="color:#f92672">*&lt;/span> bj &lt;span style="color:#f92672">=&lt;/span> tj &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some&lt;span style="color:#f92672">(&lt;/span>a &lt;span style="color:#f92672">*&lt;/span> 3L &lt;span style="color:#f92672">+&lt;/span> b&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q1&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.toList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.choose &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> nums &lt;span style="color:#f92672">-&amp;gt;&lt;/span> getMinCost &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">],&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">],&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>4&lt;span style="color:#f92672">],&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>5&lt;span style="color:#f92672">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q2&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.toList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.choose &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> nums &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getMinCost &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">],&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">],&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">(&lt;/span>10000000000000L &lt;span style="color:#f92672">+&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>4&lt;span style="color:#f92672">],&lt;/span> 10000000000000L &lt;span style="color:#f92672">+&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>5&lt;span style="color:#f92672">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.sum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the source code at &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p></description></item><item><title>Advent of Code 2024 Day9</title><link>https://zangruizhe.github.io/post/aoc2024_day9/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/aoc2024_day9/</guid><description>&lt;p>AoC 2024 Day9 F# solution #AdventOfCode #fsharp&lt;/p>
&lt;p>Today, my solution takes 5 seconds to get the result, which means my algorithm is not good enough because AoC questions usually only take 1 second to get the result.&lt;/p>
&lt;p>let me know if you have some good ideas. :D&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fsharp" data-lang="fsharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Day9&lt;/span>&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q1&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> transform &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.mapi &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> i c &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> char2Int c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">=&lt;/span> 0 &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.init n &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">_&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">$&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{i / 2}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.init n &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">_&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.concat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.toArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> lines &lt;span style="color:#f92672">=&lt;/span> String.Join&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> lines&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> transform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rec shift i j &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> j &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift i &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift 0 &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">.&lt;/span>Length &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.mapi &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> i c &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> c &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> 0L&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q2&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> transform &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.mapi &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> i c &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> char2Int c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">=&lt;/span> 0 &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.init n &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> idx &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>idx &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">$&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{i / 2}&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.init n &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> idx &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>n &lt;span style="color:#f92672">-&lt;/span> idx&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.concat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.toArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> lines &lt;span style="color:#f92672">=&lt;/span> String.Join&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> lines&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> transform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rec shift i j &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ni&lt;span style="color:#f92672">,&lt;/span> ci &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> nj&lt;span style="color:#f92672">,&lt;/span> cj &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> j &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> ci &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> cj &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> ni &lt;span style="color:#f92672">&amp;gt;=&lt;/span> nj &lt;span style="color:#66d9ef">with&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#66d9ef">in&lt;/span> 0 &lt;span style="color:#f92672">..&lt;/span> nj &lt;span style="color:#f92672">-&lt;/span> 1 &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> nj &lt;span style="color:#f92672">-&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> n&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> n&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">(&lt;/span>fst lines&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> n&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift 0 &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> nj&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> ni&lt;span style="color:#f92672">)&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">_&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">_&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift i &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">_&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> shift &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> cj &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#f92672">-&lt;/span> nj &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0 &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift 0 &lt;span style="color:#f92672">(&lt;/span>j &lt;span style="color:#f92672">-&lt;/span> nj&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift 0 &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">.&lt;/span>Length &lt;span style="color:#f92672">-&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.mapi &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> i &lt;span style="color:#f92672">(_,&lt;/span> c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> c &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> 0L&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.sum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the source code at &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p></description></item><item><title>Advent of Code 2024 Day8</title><link>https://zangruizhe.github.io/post/aoc2024_day8/</link><pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/aoc2024_day8/</guid><description>&lt;p>Today&amp;rsquo;s question is easy to write in mutable languages, like Python, but hard to write in FP code.&lt;/p>
&lt;p>Let me know if you have some ideas to simplify my F# code.&lt;/p>
&lt;p>Let&amp;rsquo;s improve our F# skills together! :D&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fsharp" data-lang="fsharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Day8&lt;/span>&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> R &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">.&lt;/span>Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> C &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">].&lt;/span>Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getPoints &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">,&lt;/span> Index array&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> points &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[|&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> 0 &lt;span style="color:#f92672">..&lt;/span> R &lt;span style="color:#f92672">-&lt;/span> 1 &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#66d9ef">in&lt;/span> 0 &lt;span style="color:#f92672">..&lt;/span> C &lt;span style="color:#f92672">-&lt;/span> 1 &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">][&lt;/span>j&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">|]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.groupBy fst
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Map.ofArray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Map.map &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">_&lt;/span> v &lt;span style="color:#f92672">-&amp;gt;&lt;/span> v &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.map snd&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> inBoard &lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> i &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> R &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> 0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> j &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;&lt;/span> C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getIdxPair &lt;span style="color:#f92672">(&lt;/span>idx_list&lt;span style="color:#f92672">:&lt;/span> Index array&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> 0 &lt;span style="color:#f92672">..&lt;/span> idx_list&lt;span style="color:#f92672">.&lt;/span>Length &lt;span style="color:#f92672">-&lt;/span> 2 &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#66d9ef">in&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> 1 &lt;span style="color:#f92672">..&lt;/span> idx_list&lt;span style="color:#f92672">.&lt;/span>Length &lt;span style="color:#f92672">-&lt;/span> 1 &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>idx_list&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">],&lt;/span> idx_list&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getAntinodes op &lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">:&lt;/span> Index&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>b&lt;span style="color:#f92672">:&lt;/span> Index&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Index &lt;span style="color:#66d9ef">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ar&lt;span style="color:#f92672">,&lt;/span> ac &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> br&lt;span style="color:#f92672">,&lt;/span> bc &lt;span style="color:#f92672">=&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> abs &lt;span style="color:#f92672">(&lt;/span>ar &lt;span style="color:#f92672">-&lt;/span> br&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> abs &lt;span style="color:#f92672">(&lt;/span>ac &lt;span style="color:#f92672">-&lt;/span> bc&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> ar &lt;span style="color:#f92672">&amp;lt;&lt;/span> br&lt;span style="color:#f92672">,&lt;/span> ac &lt;span style="color:#f92672">&amp;lt;&lt;/span> bc &lt;span style="color:#66d9ef">with&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(-&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>y&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(-&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>y&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#f92672">(-&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#f92672">(-&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>d1&lt;span style="color:#f92672">,&lt;/span> d2&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> op a d1 &lt;span style="color:#f92672">@&lt;/span> op b d2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q1&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> points_dict &lt;span style="color:#f92672">=&lt;/span> lines &lt;span style="color:#f92672">|&amp;gt;&lt;/span> getPoints
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getAntIdx &lt;span style="color:#f92672">(&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>dr&lt;span style="color:#f92672">,&lt;/span> dc&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#f92672">(&lt;/span>ar &lt;span style="color:#f92672">+&lt;/span> dr&lt;span style="color:#f92672">,&lt;/span> ac &lt;span style="color:#f92672">+&lt;/span> dc&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points_dict&lt;span style="color:#f92672">.&lt;/span>Values
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.ofSeq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.collect &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> idx_list &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> getIdxPair
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.collect &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">,&lt;/span> r&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> getAntinodes getAntIdx l r&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.filter inBoard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Set.ofSeq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q2&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> points_dict &lt;span style="color:#f92672">=&lt;/span> lines &lt;span style="color:#f92672">|&amp;gt;&lt;/span> getPoints
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getAntinodesInLine &lt;span style="color:#f92672">(&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rec loop &lt;span style="color:#f92672">(&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">)&lt;/span> x y rst &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">(&lt;/span>inBoard &lt;span style="color:#f92672">(&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rst
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop &lt;span style="color:#f92672">(&lt;/span>ar &lt;span style="color:#f92672">+&lt;/span> x&lt;span style="color:#f92672">,&lt;/span> ac &lt;span style="color:#f92672">+&lt;/span> y&lt;span style="color:#f92672">)&lt;/span> x y &lt;span style="color:#f92672">((&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">::&lt;/span> rst&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop &lt;span style="color:#f92672">(&lt;/span>ar&lt;span style="color:#f92672">,&lt;/span> ac&lt;span style="color:#f92672">)&lt;/span> x y []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points_dict&lt;span style="color:#f92672">.&lt;/span>Values
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.ofSeq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.collect &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> idx_list &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> getIdxPair
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> List.collect &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">,&lt;/span> r&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> getAntinodes getAntinodesInLine l r&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Set.ofSeq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.length
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the source code at &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p></description></item><item><title>Advent of Code 2024 Day6</title><link>https://zangruizhe.github.io/post/aoc2024_day6/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/aoc2024_day6/</guid><description>&lt;p>Tips for Q2:&lt;/p>
&lt;p>If the Guard moving to &lt;code>the same direction at same position twice&lt;/code>, that means Guard is in a loop.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fsharp" data-lang="fsharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Day6&lt;/span>&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> R &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">.&lt;/span>Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> C &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">].&lt;/span>Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> getStart &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.indexed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// |&amp;gt; Array.pick (fun (i, s) -&amp;gt; s |&amp;gt; Seq.tryFindIndex ((=) &amp;#39;^&amp;#39;) |&amp;gt; Option.map (fun j -&amp;gt; (i, j)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.pick &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> s&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>IndexOf&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;^&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> j &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1 &lt;span style="color:#66d9ef">then&lt;/span> Some&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> None&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ops &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#f92672">(-&lt;/span>1&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">,&lt;/span> 1&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rec moving i j op &lt;span style="color:#f92672">(&lt;/span>pos_set&lt;span style="color:#f92672">:&lt;/span> HashSet&lt;span style="color:#f92672">&amp;lt;&lt;/span>Index&lt;span style="color:#f92672">&amp;gt;)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_set&lt;span style="color:#f92672">.&lt;/span>Add&lt;span style="color:#f92672">((&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> ignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> next_i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> fst ops&lt;span style="color:#f92672">[&lt;/span>op&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> next_j &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">+&lt;/span> snd ops&lt;span style="color:#f92672">[&lt;/span>op&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> next_i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> next_i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> R &lt;span style="color:#f92672">||&lt;/span> next_j &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> next_j &lt;span style="color:#f92672">&amp;gt;=&lt;/span> C &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>next_i&lt;span style="color:#f92672">][&lt;/span>next_j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moving i j &lt;span style="color:#f92672">((&lt;/span>op &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">%&lt;/span> 4&lt;span style="color:#f92672">)&lt;/span> pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moving next_i next_j op pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q1&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> start&lt;span style="color:#f92672">:&lt;/span> Index &lt;span style="color:#f92672">=&lt;/span> getStart lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> post_set &lt;span style="color:#f92672">=&lt;/span> moving &lt;span style="color:#f92672">(&lt;/span>fst start&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>snd start&lt;span style="color:#f92672">)&lt;/span> 0 &lt;span style="color:#f92672">(&lt;/span>HashSet()&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post_set&lt;span style="color:#f92672">.&lt;/span>Count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">member&lt;/span> this.&lt;span style="color:#a6e22e">Q2&lt;/span>() &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> start&lt;span style="color:#f92672">:&lt;/span> Index &lt;span style="color:#f92672">=&lt;/span> getStart lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> pos_set &lt;span style="color:#f92672">=&lt;/span> moving &lt;span style="color:#f92672">(&lt;/span>fst start&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>snd start&lt;span style="color:#f92672">)&lt;/span> 0 &lt;span style="color:#f92672">(&lt;/span>HashSet()&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_set&lt;span style="color:#f92672">.&lt;/span>Remove&lt;span style="color:#f92672">(&lt;/span>start&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> ignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> isInLoop &lt;span style="color:#f92672">(&lt;/span>pos_set&lt;span style="color:#f92672">:&lt;/span> HashSet&lt;span style="color:#f92672">&amp;lt;&lt;/span>int &lt;span style="color:#f92672">*&lt;/span> int &lt;span style="color:#f92672">*&lt;/span> int&lt;span style="color:#f92672">&amp;gt;)&lt;/span> i j op &lt;span style="color:#f92672">=&lt;/span> pos_set&lt;span style="color:#f92672">.&lt;/span>Add&lt;span style="color:#f92672">((&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">,&lt;/span> op&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rec checkLoop i j op &lt;span style="color:#f92672">(&lt;/span>pos_set&lt;span style="color:#f92672">:&lt;/span> HashSet&lt;span style="color:#f92672">&amp;lt;&lt;/span>int &lt;span style="color:#f92672">*&lt;/span> int &lt;span style="color:#f92672">*&lt;/span> int&lt;span style="color:#f92672">&amp;gt;)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> next_i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> fst ops&lt;span style="color:#f92672">[&lt;/span>op&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> next_j &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">+&lt;/span> snd ops&lt;span style="color:#f92672">[&lt;/span>op&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> next_i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> next_i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> R &lt;span style="color:#f92672">||&lt;/span> next_j &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0 &lt;span style="color:#f92672">||&lt;/span> next_j &lt;span style="color:#f92672">&amp;gt;=&lt;/span> C &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>next_i&lt;span style="color:#f92672">][&lt;/span>next_j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> isInLoop pos_set i j op &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkLoop i j &lt;span style="color:#f92672">((&lt;/span>op &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">%&lt;/span> 4&lt;span style="color:#f92672">)&lt;/span> pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkLoop next_i next_j op pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.filter &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> old &lt;span style="color:#f92672">=&lt;/span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> str &lt;span style="color:#f92672">=&lt;/span> old&lt;span style="color:#f92672">.&lt;/span>ToCharArray()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> String&lt;span style="color:#f92672">(&lt;/span>str&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rst &lt;span style="color:#f92672">=&lt;/span> checkLoop &lt;span style="color:#f92672">(&lt;/span>fst start&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>snd start&lt;span style="color:#f92672">)&lt;/span> 0 &lt;span style="color:#f92672">(&lt;/span>HashSet()&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> old
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rst&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.length
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the source code at &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p></description></item><item><title>Advent of Code 2024 Day3</title><link>https://zangruizhe.github.io/post/aoc2024_day3/</link><pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/aoc2024_day3/</guid><description>&lt;p>Today&amp;rsquo;s question should process the &lt;code>whole input together&lt;/code>.&lt;/p>
&lt;p>If you process input line by line, you can pass Q1, but &lt;code>can not&lt;/code> pass Q2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fsharp" data-lang="fsharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> Day3 &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> Q1 &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> str &lt;span style="color:#f92672">=&lt;/span> String.Concat&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str &lt;span style="color:#f92672">|&amp;gt;&lt;/span> split2IntByReg &lt;span style="color:#e6db74">&amp;#34;mul&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">((&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">d+),(&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">d+)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Array.sumBy &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> n &lt;span style="color:#f92672">-&amp;gt;&lt;/span> n&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">*&lt;/span> n&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> Q2 &lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[]&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> str &lt;span style="color:#f92672">=&lt;/span> String.Concat&lt;span style="color:#f92672">(&lt;/span>lines&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Regex.Matches&lt;span style="color:#f92672">(&lt;/span>str&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">@&amp;#34;mul\((\d+),(\d+)\)|don&amp;#39;t\(\)|do\(\)&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.fold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">,&lt;/span> isEnable&lt;span style="color:#f92672">)&lt;/span> m &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>Value&lt;span style="color:#f92672">.&lt;/span>StartsWith&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mul&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> isEnable &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l &lt;span style="color:#f92672">@&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#f92672">(&lt;/span>int m&lt;span style="color:#f92672">.&lt;/span>Groups&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">].&lt;/span>Value&lt;span style="color:#f92672">,&lt;/span> int m&lt;span style="color:#f92672">.&lt;/span>Groups&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">].&lt;/span>Value&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">],&lt;/span> isEnable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#f92672">,&lt;/span> isEnable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>Value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;do()&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>Value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;don&amp;#39;t()&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failwith &lt;span style="color:#f92672">$&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wrong patten m={m.Value}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>[]&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> fst
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> Seq.sumBy &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#f92672">(&lt;/span>l&lt;span style="color:#f92672">,&lt;/span> r&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> l &lt;span style="color:#f92672">*&lt;/span> r&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the source code at &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p></description></item><item><title>《让人生停止灰暗的艺术》</title><link>https://zangruizhe.github.io/post/xing_wei_ren_zhi_liao_fa/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/post/xing_wei_ren_zhi_liao_fa/</guid><description>&lt;h2 id="认知疗法">认知疗法&lt;/h2>
&lt;p>最重要的就是有爱的能力，爱的能力是发挥创造力，和享受生活的关键&lt;/p>
&lt;p>在任何情况下，我们都可以为自己和为他人做些有意义的事情&lt;/p>
&lt;p>思想实验&amp;ndash;“流浪汉”疗法,思考自己是个一无所有的流浪汉，但是仍然能快乐生活，想想是否可以实现。&lt;/p>
&lt;h3 id="对生活的事情分级">对生活的事情分级&lt;/h3>
&lt;p>(-3）worst/worse/bad/normal/good/better/best (3)&lt;/p>
&lt;p>(-3）糟透了/很糟/糟/一般/棒/很棒/棒极了 (3)&lt;/p>
&lt;p>先想想标尺的两头是什么：&lt;/p>
&lt;p>糟透了的事情：死亡，恶性肿瘤&lt;/p>
&lt;p>棒极了的事情：孩子出生，结婚&lt;/p>
&lt;p>然后用这两头的事情来校准其他事情, 比如：&lt;/p>
&lt;p>拿到了心仪的工作机会：很棒&lt;/p>
&lt;p>没拿到心仪的工作机会：糟&lt;/p>
&lt;p>丢掉了工作：糟&lt;/p>
&lt;p>亏了10万：bad-normal(-0.5)&lt;/p>
&lt;p>赚了20万：棒&lt;/p>
&lt;p>通过这样校准，让我们对事物，尤其是糟糕的事物评价变得具体，从而不会轻易把事情归类到 糟透了/很糟 这个范围，也就不会这么担忧了&lt;/p>
&lt;p>那些坚强、成熟的人，对生活中遇到的大多数事情都会归类到 【糟，一般、棒】这个范围内，所以他们的心态也就更加平和&lt;/p>
&lt;h3 id="认知练习">认知练习&lt;/h3>
&lt;ul>
&lt;li>事情：发生了什么事&lt;/li>
&lt;li>分级：事情的分级&lt;/li>
&lt;li>详情：事情的客观详情&lt;/li>
&lt;li>结果：过一段时间再回头看这个分级是否合理&lt;/li>
&lt;/ul></description></item><item><title>About me</title><link>https://zangruizhe.github.io/about_me/</link><pubDate>Tue, 25 Jan 2022 14:00:00 +0000</pubDate><guid>https://zangruizhe.github.io/about_me/</guid><description>&lt;p>Hello, I am &lt;code>Ruizhe(Racer) Zang&lt;/code>.&lt;/p>
&lt;p>I like programming:&lt;/p>
&lt;ol>
&lt;li>C++, HFT&lt;/li>
&lt;li>Python machine learning, XGBoost&lt;/li>
&lt;li>Functional Programming, F#&lt;/li>
&lt;/ol>
&lt;p>I like using probability:&lt;/p>
&lt;ol>
&lt;li>Texas hold &amp;rsquo;em&lt;/li>
&lt;li>Bayesian inference, PyMC&lt;/li>
&lt;/ol>
&lt;p>I like programming challenges:&lt;/p>
&lt;p>My &lt;a href="https://adventofcode.com">AoC&lt;/a> F# solution: &lt;a href="https://github.com/zangruizhe/AoC">https://github.com/zangruizhe/AoC&lt;/a>&lt;/p>
&lt;p>My F-99 solution: &lt;a href="https://github.com/zangruizhe/F-99">https://github.com/zangruizhe/F-99&lt;/a>&lt;/p></description></item></channel></rss>